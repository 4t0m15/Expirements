public class CircularlyLinkedList<E>{

    //instance variables of the CircularlyLinkedList
    private static class Node<E> {
    private E element;
    private Node<E> next;

    public Node(E e, Node<E> n) {
        element = e;
        next = n;
    }

    public E getElement(){
        return element;
    }

    public Node<E> getNext() {
        return next;
    }

    public void setNext(Node<E> n){
        next = n;
    }
    }

    public static class SinglyLinkedList<E> {
    private Node<E> head = null;
    private Node<E> tail = null;
    private int size = 0;

    public SinglyLinkedList(){
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public E first() {
        if (isEmpty()) return null;
        return head.getElement();
    }

    public E last() {
        if(isEmpty()) return null;
        return tail.getElement();
    }

    public void addFirst(E e) {
        head = new Node<>(e, head);
        if(size == 0){
            tail = head;
        }
        size++;
    }

    public void addLast(E e) {
        Node<E> newest = new Node<>(e, null);
        if(isEmpty())
            head = newest;
        else
            tail.setNext(newest);
        tail = newest;
        size++;
    }

    public E removeFirst() {
        if(isEmpty())
            return null;
        E answer = head.getElement();
        head = head.getNext();
        size--;
        if(size == 0)
            tail = null;
        return answer;
    }
    public void addAtIndex(int index, E element){
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
        if(index == 0) {
            addFirst(element);
            return;
        }
        if(index == size) {
            addLast(element);
            return;
        }
        Node<E> current = head;
        for(int i = 0; i < index -1; i++)
        {
            current = current.getNext();
        }
        Node<E> newNode = new Node<>(element, current.getNext());

    }
    public E removeLast() {
        if (isEmpty()) {
            return null;
        }
        if (size == 1) {
            return removeFirst();
        }
        Node<E> current = head;
        while (current.getNext() != tail) {
            current = current.getNext();
        }
        E element = tail.getElement();
        tail = current;
        tail.setNext(null);
        size--;
        return element;
    }

    public E get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
        Node<E> current = head;
        for (int i = 0; i < index; i++) {
            current = current.getNext();
        }
        return current.getElement();
    }
    public boolean contains(E element) {
        Node<E> current = head;
        while(current != null){
            if (element.equals(current.getElement())){
                return true;
            }
            current = current.getNext();
        }
        return false;
    }
    public String toString() {
        Node<E> current = head;
        String total = "";
        while(current != null){
            total += current.getElement();
            current = current.getNext();
            total += "-->";
        }
        total+="null";
        System.out.println(total);
        return "";
    }

    public void clear(){
        head = null;
        tail = null;
        size = 0;
    }
    private Node<E>tail=null;
    private int size = 0;               //number of nodes in the list
    public CircularlyLinkedList(){}     //constructs an initially empty list
    //access methods
    public int size() { return size; }
    public boolean isEmpty() {return size == 0}
    public E first() { //returns but does not remove first element
        if(isEmpty()) { return null }
    return tail.getNext().getElement(); //the head is *after* the tail
    }
    public E last() {                   // returns but does not remove the last element
        if(isEmpty()) return null;
        return tail.getElement();
    }
}